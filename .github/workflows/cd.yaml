name: Continuous Delivery

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+\\+.*"
      - "v[0-9]+.[0-9]+.[0-9]+\\-.*"

env:
  GITHUB_NUGET_SOURCE: 'https://nuget.pkg.github.com/Hibex-Solutions/index.json'
  NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: Restore
        run: |
          dotnet tool restore
          dotnet restore ./TheCleanArch.sln

      - name: Set up version
        id: version
        run: |
          build_meta=$(dotnet gitversion /output json /showvariable BuildMetaData)
          commits_since=$(dotnet gitversion /output json /showvariable CommitsSinceVersionSource)
          prerelease_tag=$(dotnet gitversion /output json /showvariable PreReleaseTag)
          prerelease_label=$(dotnet gitversion /output json /showvariable PreReleaseLabel)

          if [ -z "$build_meta" ] && [ "$commits_since" = "0" ]; then
            echo "is_released=true" >> "$GITHUB_OUTPUT"

            if [ -n "$prerelease_tag" ] && [ "$prerelease_label" =~ ^preview|rc$ ]; then
              echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
              echo "is_public=true" >> "$GITHUB_OUTPUT"
            elif [ -n "$prerelease_tag" ]; then
              echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
              echo "is_public=false" >> "$GITHUB_OUTPUT"
            else
              echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
              echo "is_public=true" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "is_released=false" >> "$GITHUB_OUTPUT"
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
            echo "is_public=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build
        if: ${{ steps.version.is_released }}
        run: dotnet build ./TheCleanArch.sln -c Release --no-restore

      - name: Test
        if: ${{ steps.version.is_released }}
        run: dotnet test ./TheCleanArch.sln -c Release --no-build

      - name: Publish private packages
        if: ${{ steps.version.is_released && steps.version.is_prerelease && !steps.version.is_public }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          major_minor_patch=$(dotnet gitversion /output json /showvariable MajorMinorPatch)
          release_tag=$(dotnet gitversion /output json /showvariable NuGetPreReleaseTagV2)
          short_sha=$(dotnet gitversion /output json /showvariable ShortSha)
          
          dotnet pack -c Release /p:VersionPrefix="$major_minor_patch" /p:VersionSuffix="$release_tag.sha.$short_sha"  --output ./artifacts
          ls -lha ./artifacts
          dotnet nuget push ./artifacts/TheCleanArch.*.nupkg --source "$GITHUB_NUGET_SOURCE"  --api-key "${GITHUB_TOKEN}"

      - name: Publish public packages
        if: ${{ steps.version.is_released && steps.version.is_prerelease && steps.version.is_public }}
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_THECLEANARCH_TOKEN }}
        run: |
          major_minor_patch=$(dotnet gitversion /output json /showvariable MajorMinorPatch)
          release_tag=$(dotnet gitversion /output json /showvariable NuGetPreReleaseTagV2)
          short_sha=$(dotnet gitversion /output json /showvariable ShortSha)
          
          dotnet pack -c Release /p:VersionPrefix="$major_minor_patch" /p:VersionSuffix="$release_tag.sha.$short_sha"  --output ./artifacts
          ls -lha ./artifacts
          dotnet nuget push ./artifacts/TheCleanArch.*.nupkg --source "$NUGET_SOURCE"  --api-key "${NUGET_TOKEN}"

      - name: Release packages
        if: ${{ steps.version.is_released && !steps.version.is_prerelease && steps.version.is_public }}
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_THECLEANARCH_TOKEN }}
        run: |
          full_semver=$(dotnet gitversion /output json /showvariable FullSemVer)
          
          dotnet pack -c Release /p:Version="$full_semver" --output ./artifacts
          ls -lha ./artifacts
          dotnet nuget push ./artifacts/TheCleanArch.*.nupkg --source "$NUGET_SOURCE"  --api-key "${NUGET_TOKEN}"
      
